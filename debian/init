#! /bin/sh
### BEGIN INIT INFO
# Provides:          gocm
# Required-Start:    $local_fs $remote_fs $network $syslog $named
# Required-Stop:     $local_fs $remote_fs $network $syslog $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts GoCM
# Description:       starts GoCM using start-stop-daemon
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="GCM notification service"
NAME=gocm
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS=""
RUNDIR=/var/run/$NAME
PIDFILE=$RUNDIR/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
USER=nobody
GROUP=nogroup

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

GOCM_APIKEY=""
GOCM_HOST="127.0.0.1"
GOCM_PORT=5061

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

. /lib/init/vars.sh
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	[ -z "$GOCM_APIKEY" ] && log_failure_msg "GOCM_APIKEY has to be defined in /etc/default/$NAME" && exit 0
	[ -z "$GOCM_HOST" ] && log_failure_msg "GOCM_HOST can' be empty in /etc/default/$NAME" && exit 0
	[ -z "$GOCM_PORT" ] && log_failure_msg "GOCM_PORT can' be empty in /etc/default/$NAME" && exit 0

	mkdir -p $RUNDIR
	chown -R $USER:$GROUP $RUNDIR
	chmod -R ug=rwX,o= $RUNDIR

	start-stop-daemon --start --quiet --pidfile $PIDFILE --user $USER --group $GROUP --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --background \
		--pidfile $PIDFILE --make-pidfile \
		--user $USER --group $GROUP --chuid $USER:$GROUP \
		--exec $DAEMON -- \
		--apikey $GOCM_APIKEY \
		--host $GOCM_HOST \
		--port $GOCM_PORT \
		$DAEMON_ARGS \
		|| return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --user $USER --group $GROUP --exec $DAEMON
	RETVAL="$?"
	rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
